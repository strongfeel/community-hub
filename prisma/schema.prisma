// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  userId Int @id @default(autoincrement()) @map("userId")
  email String @unique @map("email")
  password String @map("password")
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  userInfos UserInfos?
  posts Posts[]
  comments Comments[]
  userHistories UserHistories[]

  @@map("Users")
}

model Posts {
  postId Int @id @default(autoincrement()) @map("postId")
  userId Int @map("userId")
  title String @map("title")
  content String @db.Text @map("content")
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  user Users @relation(fields: [userId], references: [userId], onDelete: Cascade)
  comments Comments[]

  @@map("Posts")
}

model UserInfos {
  userInfoId Int @id @default(autoincrement()) @map("userInfoId")
  userId Int @unique @map("userId")
  name String @map("name")
  age Int? @map("age")
  gender String @map("gender")
  profileImage String? @map("profileImage")
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  user Users @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@map("UserInfos")
}

model Comments {
  commentId Int @id @default(autoincrement()) @map("commentId")
  userId Int @map("userId")
  postId Int @map("postId")
  content String @map("content")
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  user Users @relation(fields: [userId], references: [userId], onDelete: Cascade)
  post Posts @relation(fields: [postId], references: [postId], onDelete: Cascade)

  @@map("Comments")
}

model UserHistories {
  userHistoryId String   @id @default(uuid()) @map("userHistoryId")
  userId        Int      @map("userId") // 사용자(Users) 테이블을 참조하는 외래키
  changedField  String   @map("changedField") // 변경된 필드명
  oldValue      String?  @map("oldValue") // 변경 전 값
  newValue      String   @map("newValue") // 변경 후 값
  changedAt     DateTime @default(now()) @map("changedAt")
  
  // Users 테이블과 관계를 설정합니다.
  user Users @relation(fields: [userId], references: [userId], onDelete: Cascade)
  
  @@map("UserHistories")
  }
